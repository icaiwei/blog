(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{2413:function(s,a,e){s.exports=e.p+"assets/img/image-20231017204344939.ade250b3.png"},2866:function(s,a,e){"use strict";e.r(a);var t=e(0),r=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[s._v("#")]),s._v(" 说明")]),s._v(" "),a("h3",{attrs:{id:"什么是automapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是automapper"}},[s._v("#")]),s._v(" 什么是AutoMapper")]),s._v(" "),a("p",[s._v("AutoMapper是以.NET(C#)语言开发的一个轻量的处理一个实体对象到另一个实体对象之间映射关系的组件库。")]),s._v(" "),a("p",[s._v("开发人员需要做的是通过AutoMapper配置两个实体对象之间的一些映射关系，就可以直接实现映射关系的复用，提高开发效率，减少重复代码。")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://automapper.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网地址"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://docs.automapper.org/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[s._v("文档地址"),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"为什么要做对象之间的映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要做对象之间的映射"}},[s._v("#")]),s._v(" 为什么要做对象之间的映射")]),s._v(" "),a("p",[s._v("为了降低现代开发框架的复杂度，往往需要做代码分层，分层之后，必然出现不同的数据承载对象VO、BO、Entity ，从设计的角度来说，VO、BO、Entity 的设计思路并不违反 DRY 原则，为了分层清晰、减少耦合，多维护几个类的成本也并不是不能接受的，对于代码重复的问题，我们可以通过继承或者组合来解决。")]),s._v(" "),a("p",[s._v("层与层之间数据对象的转换工作是一个非常常见的情况，最简单的方式就是手动复制。当然，使用数据对象转化工具，可以大大简化繁琐的对象转化工作，AutoMapper就是一种很好的转换工具。")]),s._v(" "),a("h2",{attrs:{id:"安装包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装包"}},[s._v("#")]),s._v(" 安装包")]),s._v(" "),a("p",[a("img",{attrs:{src:e(2413),alt:"image-20231017204344939"}})]),s._v(" "),a("h2",{attrs:{id:"注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册"}},[s._v("#")]),s._v(" 注册")]),s._v(" "),a("p",[s._v("在Program.cs中添加")]),s._v(" "),a("div",{staticClass:"language-c# line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#region 初始化AutoMapper 自动映射\nvar serviceAssembly = Assembly.Load("Test.Api");\nbuilder.Services.AddAutoMapper(serviceAssembly);\n#endregion\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[s._v("#")]),s._v(" 使用")]),s._v(" "),a("p",[s._v("在Config文件夹下新建类")]),s._v(" "),a("p",[s._v("AutoMapperConfig.cs")]),s._v(" "),a("div",{staticClass:"language-c# line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/// <summary>\n/// 自动映射\n/// </summary>\npublic class AutoMapperConfig : Profile\n{\n    /// <summary>\n    /// 自动映射\n    /// </summary>\n    public AutoMapperConfig()\n    {\n        //CreateMap<SysUserDO, SysUserRespVO>();\n\t\t//CreateMap<SysUserDO, SysUserRespVO>().ReverseMap();\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);