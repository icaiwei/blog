(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{2294:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-18.efb749b9.png"},2295:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-19.acddfee5.png"},2296:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-20.6eba7794.png"},2297:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-21.9d005f46.png"},2298:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-22.3ac16d24.png"},2299:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-23.b0da1186.png"},2300:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-24.518f8620.png"},2301:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-25.12985038.png"},2302:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-26.1a809d62.png"},2303:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-27.c7dc5d2a.png"},2304:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-28.2c9686ef.png"},2305:function(t,s,a){t.exports=a.p+"assets/img/image-20240307-29.356fa824.png"},2843:function(t,s,a){"use strict";a.r(s);var i=a(0),r=Object(i.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"stm-32-的-gpio-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stm-32-的-gpio-介绍"}},[t._v("#")]),t._v(" STM 32 的 GPIO 介绍")]),t._v(" "),s("p",[t._v("GPIO 是通用输入/输出端口的简称，是 STM 32 可控制的引脚。GPIO 的引脚与外部硬件设备连接，可实现与外部通讯、控制外部硬件或者采集外部硬件数据的功能。")]),t._v(" "),s("p",[t._v("STM32F103ZET6芯片为144脚芯片，包括7个通用目的的输入/输出口（GPIO）组，分别为GPIOA、GPIOB、GPIOC、GPIOD、GPIOE、GPIOF、GPIOG，同时每组GPIO口组有16个GPIO口。通常简略称为PAx、PBx、PCx、PDx、PEx、PFx、PGx，其中x为0-15。")]),t._v(" "),s("p",[t._v("STM32的大部分引脚除了当 GPIO 使用之外，还可以复用为外设功能引脚（比如串口）。")]),t._v(" "),s("h2",{attrs:{id:"gpio-基本结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gpio-基本结构"}},[t._v("#")]),t._v(" GPIO 基本结构")]),t._v(" "),s("p",[t._v("每个 GPIO 内部都有这样的一个电路结构，这个结构在本文下面会具体介绍。\n"),s("img",{attrs:{src:a(2294),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"电路图分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#电路图分析"}},[t._v("#")]),t._v(" 电路图分析")]),t._v(" "),s("p",[t._v("保护二极管：IO 引脚上下两边两个二极管用于防止引脚外部过高、过低的电压输入。当引脚电压高于 VDD 时，上方的二极管导通；当引脚电压低于 VSS 时，下方的二极管导通，防止不正常电压引入芯片导致芯片烧毁。但是尽管如此，还是不能直接外接大功率器件，须加大功率及隔离电路驱动，防止烧坏芯片或者外接器件无法正常工作。")]),t._v(" "),s("p",[t._v("P-MOS 管和 N-MOS 管：由 P-MOS 管和 N-MOS 管组成的单元电路使得 GPIO 具有“推挽输出”和“开漏输出”的模式。这里的电路会在下面很详细地分析到。")]),t._v(" "),s("p",[t._v("TTL 肖特基触发器：信号经过触发器后，模拟信号转化为 0 和 1 的数字信号。但是，当 GPIO 引脚作为 ADC 采集电压的输入通道时，用其“模拟输入”功能，此时信号不再经过触发器进行 TTL 电平转换。ADC 外设要采集到的原始的模拟信号。"),s("br"),t._v("\n   \n这里需要注意的是，在查看《STM32中文参考手册 V10》中的 GPIO 的表格时，会看到有“FT”一列，这代表着这个 GPIO 口时兼容3.3V 和5V 的；如果没有标注“FT”，就代表着不兼容5V。")]),t._v(" "),s("h2",{attrs:{id:"stm-32-的-gpio-工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stm-32-的-gpio-工作方式"}},[t._v("#")]),t._v(" STM 32 的 GPIO 工作方式")]),t._v(" "),s("p",[t._v("GPIO 支持4种输入模式（浮空输入、上拉输入、下拉输入、模拟输入）和4种输出模式（开漏输出、开漏复用输出、推挽输出、推挽复用输出）。同时，GPIO 还支持三种最大翻转速度（2MHz、10MHz、50MHz）。每个 I/O 口可以自由编程，但 I/O 口寄存器必须按32位字被访问。\n"),s("img",{attrs:{src:a(2295),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"gpio-的八种工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gpio-的八种工作方式"}},[t._v("#")]),t._v(" GPIO 的八种工作方式")]),t._v(" "),s("ul",[s("li",[t._v("浮空输入模式（浮空输入模式下，I/O 端口的电平信号直接进入输入数据寄存器。也就是说，I/O 的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空（在无信号输入）的情况下，读取该端口的电平是不确定的。）\n"),s("img",{attrs:{src:a(2296),alt:""}})]),t._v(" "),s("li",[t._v("上拉输入模式（上拉输入模式下，I/O端口的电平信号直接进入输入数据寄存器。但是在I/O端口悬空（在无信号输入）的情况下，输入端的电平可以保持在高电平；并且在I/O端口输入为低电平的时候，输入端的电平也还是低电平。）\n"),s("img",{attrs:{src:a(2297),alt:""}})]),t._v(" "),s("li",[t._v("下拉输入模式（下拉输入模式下，I/O 端口的电平信号直接进入输入数据寄存器。但是在 I/O 端口悬空（在无信号输入）的情况下，输入端的电平可以保持在低电平；并且在 I/O 端口输入为高电平的时候，输入端的电平也还是高电平。）\n"),s("img",{attrs:{src:a(2298),alt:""}})]),t._v(" "),s("li",[t._v("模拟输入模式（模拟输入模式下，I/O 端口的模拟信号（电压信号，而非电平信号）直接模拟输入到片上外设模块，比如 ADC 模块等等。）\n"),s("img",{attrs:{src:a(2299),alt:""}})]),t._v(" "),s("li",[t._v("开漏输出模式（开漏输出模式下，通过设置位设置/清除寄存器或者输出数据寄存器的值，途经 N-MOS 管，最终输出到 I/O 端口。这里要注意 N-MOS 管，当设置输出的值为高电平的时候，N-MOS 管处于关闭状态，此时 I/O 端口的电平就不会由输出的高低电平决定，而是由 I/O 端口外部的上拉或者下拉决定；当设置输出的值为低电平的时候，N-MOS 管处于开启状态，此时 I/O 端口的电平就是低电平。同时，I/O 端口的电平也可以通过输入电路进行读取；注意，I/O 端口的电平不一定是输出的电平。）\n"),s("img",{attrs:{src:a(2300),alt:""}})]),t._v(" "),s("li",[t._v("开漏复用输出模式（开漏复用输出模式，与开漏输出模式很是类似。只是输出的高低电平的来源，不是让 CPU 直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的。）\n"),s("img",{attrs:{src:a(2301),alt:""}})]),t._v(" "),s("li",[t._v("推挽输出模式（推挽输出模式下，通过设置位设置/清除寄存器或者输出数据寄存器的值，途经 P-MOS 管和 N-MOS 管，最终输出到 I/O 端口。这里要注意 P-MOS 管和 N-MOS 管，当设置输出的值为高电平的时候，P-MOS 管处于开启状态，N-MOS 管处于关闭状态，此时 I/O 端口的电平就由 P-MOS 管决定：高电平；当设置输出的值为低电平的时候，P-MOS 管处于关闭状态，N-MOS 管处于开启状态，此时 I/O 端口的电平就由 N-MOS 管决定：低电平。同时，I/O 端口的电平也可以通过输入电路进行读取；注意，此时 I/O 端口的电平一定是输出的电平。）\n"),s("img",{attrs:{src:a(2302),alt:""}})]),t._v(" "),s("li",[t._v("推挽复用输出模式（推挽复用输出模式，与推挽输出模式很是类似。只是输出的高低电平的来源，不是让 CPU 直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的。）\n"),s("img",{attrs:{src:a(2303),alt:""}})])]),t._v(" "),s("h2",{attrs:{id:"推挽结构和推挽电路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推挽结构和推挽电路"}},[t._v("#")]),t._v(" 推挽结构和推挽电路")]),t._v(" "),s("p",[t._v("推挽结构一般是指两个参数相同的三极管或 MOS 管分别受两互补信号的控制，总是在一个三极管或 MOS 管导通的时候另一个截止。高低电平由输出电平决定。")]),t._v(" "),s("p",[t._v("推挽电路是两个参数相同的三极管或 MOSFET，以推挽方式存在于电路中，各负责正负半周的波形放大任务。电路工作时，两只对称的功率开关管每次只有一个导通，所以导通损耗小、效率高。输出既可以向负载灌电流，也可以从负载抽取电流。推拉式输出级既提高电路的负载能力，又提高开关速度。")]),t._v(" "),s("h2",{attrs:{id:"开漏输出和推挽输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开漏输出和推挽输出"}},[t._v("#")]),t._v(" 开漏输出和推挽输出")]),t._v(" "),s("p",[t._v("开漏输出：只可以输出强低电平，高电平得靠外部电阻拉高。输出端相当于三极管的集电极。适合于做电流型的驱动，其吸收电流的能力相对强(一般20ma 以内)；")]),t._v(" "),s("p",[t._v("推挽输出:可以输出强高、低电平，连接数字器件。\n"),s("img",{attrs:{src:a(2304),alt:""}}),t._v("\n该图中左边的便是推挽输出模式，其中比较器输出高电平时下面的 PNP 三极管截止，而上面 NPN 三极管导通，输出电平 VS+；当比较器输出低电平时则恰恰相反，PNP 三极管导通，输出和地相连，为低电平。右边的则可以理解为开漏输出形式，需要接上拉。")]),t._v(" "),s("h2",{attrs:{id:"stm32中的-i-o-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stm32中的-i-o-模式"}},[t._v("#")]),t._v(" STM32中的 I/O 模式")]),t._v(" "),s("p",[s("img",{attrs:{src:a(2305),alt:""}})])])}),[],!1,null,null,null);s.default=r.exports}}]);